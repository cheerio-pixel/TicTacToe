#+title: Main

Here lies all the plans and structure of the program.
TODO marks if is implemented to the program

* Structure
** Logic
*** DONE Board
CLOSED: [2021-04-06 Tue 12:05]
The board is a 3x3 matrix which may hold numbers from 0 to 2, 0 representing
nothing, 1 a player and 2 the other player.

It has the the method ~Insert~, ~Display~ and ~Reset~
<<Insert>>First the method insert will accept the arguments x,y,player and if every
argument is valid, it will insert the player in the given x, y coordinates.

For the arguments to be valid it needs to first check
1) If the player is either 1 or 2
2) If the coordinate is inside the matrix
3) If the coordinate is occupied

<<Display>>Second the method display will +print a formatted good-looking board+ return a
formatted string substituting:
The 0 with space,
The 1 with X and
The 2 with O.
<<Reset>>Third the method Reset will return the Board to it's original state

*** DONE Win
CLOSED: [2021-04-09 Fri 08:57]
C = Check
[ ] [ ] [ ]
[ ] [ ] [ ]
[ ] [ ] [ ]
2) Sum from left to right

   1) 1

   2) 2

   3) 3

3) Sum from top to bottom

   1) 1

   2) 2

   3) 3

4) Sum diagonals

5) Win if 3 or 6

6) If win
   1) return True

*** DONE Loop
CLOSED: [2021-04-09 Fri 08:57]
In the script is the class core.
The order goes like this:

First init the player

- Start a loop
- Display the board
  - Pass display generator to iterator loop
- Display the current player
  - Get current player
  - Print
- Display a prompt
  - Ask for input
- Evaluate input
  - Check type
  - [[Insert player][Insert input]]
- Check if win or full
  - If win or full
    - Display winner
      - Get winner
      - Print
    - [[<<Reset>>][Clear board]]
    - Display a menu for confirmation to play again
  - Else
    - [[End Turn]]
      ^^^---

Repeat

*** DONE Player
CLOSED: [2021-04-09 Fri 08:57]
:PROPERTIES:
:ID:       cf2c76e5-6916-41f6-a61b-a9971d315fd9
:END:
A player is a mechanic of the game
- A player have:
  - A turn
    - The turn is the position of a element of a queue
  - A player (Token)
    - Is a identity.
    - It's inside a queue
    - It doesn't need to be handled by a player,  board take care of that.
  - Actions
    - <<Insert player>>
      - Pass the player to the board's method ~Insert~ (Current element of the queue)
    - <<End turn>>
      - Pop element of queue
      - Append in the queue
